#!/usr/bin/env python


"""
Usage:
  node_plant <node_number> <node_type>
"""


from __future__ import division
import sys
sys.dont_write_bytecode = True
import os
import importlib
import numpy as np
import rospy
import rosbag
from rospy.numpy_msg import numpy_msg
PKG = 'dinsdale'
import roslib; roslib.load_manifest(PKG)
from dinsdale.msg import Floats
from dinsdale_system.tools.read_matrix import *


# ----------------------------------------------------------------


class PlantNode:
    """ ROS wrapper for a Plant object """


    def __init__(self, node_number, node_type):
        """ Initialize ROS node """

        # Setup publishers
        self.pub_v = rospy.Publisher('~v', numpy_msg(Floats))
        self.pub_y = rospy.Publisher('~y', numpy_msg(Floats))

        # Setup subscribers
        rospy.Subscriber('~w', numpy_msg(Floats), self.neighbour_data_received)
        rospy.Subscriber('controller%s/u' % node_number, numpy_msg(Floats), self.control_input_received)

        # Initialize plant
        self.node_number = node_number
        loc, f = os.path.split(os.path.dirname(os.path.abspath(__file__)))
        path = os.path.join(loc, "src/dinsdale_system/input_parameters/x0.txt")
        x0 = load_matrix_from_file(path)
        x0 = x0[node_number, :].T
        path = os.path.join(loc, "src/dinsdale_system/input_parameters/u0.txt")
        u0 = load_matrix_from_file(path)
        u0 = u0[node_number, :].T
        path = os.path.join(loc, "src/dinsdale_system/input_parameters/T.txt")
        T = load_matrix_from_file(path)
        T = T[0, 0]
        module_name = 'dinsdale_system.plant'
        if node_type != 0:
            module_name += '_' + str(node_type)
        plant_module = importlib.import_module(module_name)
        self.plant = plant_module.Plant(node_number, x0, u0, T)

        # Open bag to log data
        bag_name = 'plant_' + str(node_number) + '.bag'
        dir_path = os.path.join(loc, 'bags')
        dir_list = os.listdir(dir_path)
        dir_list = filter(lambda x: os.path.isdir(os.path.join(dir_path, x)), dir_list)
        dir_list.sort(reverse = True)
        newest_dir = dir_list[0]
        self.bag = rosbag.Bag(os.path.join(dir_path, newest_dir, bag_name), 'w')

        # Publish initial data to other plants
        while not rospy.get_param('/dinsdale/plants_topology_set'):
            rospy.sleep(1)
        #v = numpy_msg(Floats())
        #v.data = np.reshape(np.array(self.plant.v, dtype = np.float32), self.plant.v.size)
        #self.pub_v.publish(v.data)
        #self.bag.write('plant%s/v' % (node_number), v)
        self.pub_v.publish(np.reshape(np.array(self.plant.v, dtype = np.float32), self.plant.v.size))
        rospy.sleep(1)
        self.pub_v.publish(np.reshape(np.array(self.plant.v, dtype = np.float32), self.plant.v.size))

    def control_input_received(self, u):
        """ Control input u is received """

        # Save data
        self.plant.u = np.mat(u.data).T


    def neighbour_data_received(self, w):
        """ Data w is received from neighbour plants """

        # Save data
        self.plant.w = np.mat(w.data).T
        self.bag.write('plant%s/w' % (self.node_number), w)

        # Update plant state
        self.plant.iterate_state()

        # Publish new data
        self.pub_y.publish(np.reshape(np.array(self.plant.y, dtype = np.float32), self.plant.y.size))
        #v = numpy_msg(Floats())
        #v.data = np.reshape(np.array(self.plant.v, dtype = np.float32), self.plant.v.size)
        #self.pub_v.publish(v.data)
        #self.bag.write('plant%s/v' % (node_number), v)
        self.pub_v.publish(np.reshape(np.array(self.plant.v, dtype = np.float32), self.plant.v.size))


# ----------------------------------------------------------------


def main(arguments):
    """ Script entry point """

    node_number = int(arguments[1])
    node_type = int(arguments[2])
    rospy.init_node('plant%s' % (node_number))
    node = PlantNode(node_number, node_type)
    rospy.spin()
    node.bag.close()


if __name__ == '__main__':
    arguments = rospy.myargv(argv = sys.argv)
    main(arguments)
