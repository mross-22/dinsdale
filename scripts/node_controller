#!/usr/bin/env python


from __future__ import division
import os
import sys
import rospy
import rosbag
import time
from rospy.numpy_msg import numpy_msg
PKG = 'dinsdale'
import roslib; roslib.load_manifest(PKG)
from dinsdale.msg import Floats
from dinsdale_system.read_matrix import *
from dinsdale_system.controller import *


# ----------------------------------------------------------------


class ControllerNode:
    """ ROS wrapper for a Controller object """


    def __init__(self, number):
        """ Initialize ROS node """

        # Setup publishers and subscribers
        self.pub_u = rospy.Publisher('~u', numpy_msg(Floats))
        loc, f = os.path.split(os.path.dirname(os.path.abspath(__file__)))
        path = os.path.join(loc, "src/dinsdale_system/input_parameters/A_controllers.txt")
        A = load_matrix_from_file(path)
        if A.size:
            self.pub_v = rospy.Publisher('~g', numpy_msg(Floats))
            neighbours = [] # Maybe unnecessary
            for i in range(A.shape[1]):
                if A[number, i] and number != i:
                    neighbours.append(i) # Maybe unnecessary
                    rospy.Subscriber('controller%s/g' % (i), numpy_msg(Floats), self.neighbour_data_received, i)
        rospy.Subscriber('plant%s/y' % (number), numpy_msg(Floats), self.plant_output_received)

        # Initialize controller
        self.controller = Controller(number)

        # Open bag to log data
        bag_name = 'controller_' + str(number) + '.bag'
        dir_path = os.path.join(loc, 'bags')
        dir_list = os.listdir(dir_path)
        dir_list = filter(lambda x: os.path.isdir(os.path.join(dir_path, x)), dir_list)
        dir_list.sort(reverse = True)
        newest_dir = dir_list[0]
        self.bag = rosbag.Bag(os.path.join(dir_path, newest_dir, bag_name), 'w')


    def plant_output_received(self, y):
        """ Plant output y is received """

        # Save data
        self.controller.y = np.mat(y.data).T
        self.bag.write('plant%s/y' % (number), y)

        # Update controller state
        self.controller.iterate_state()

        # Publish new data
        floats = Floats()
        floats.data = np.reshape(np.array(self.controller.u, dtype = np.float32), self.controller.u.size)
        self.pub_u.publish(floats.data)
        self.bag.write('controller%s/u' % (number), floats)


    def neighbour_data_received(self, w, i):
        """ Data z is received from controller i """
        pass


# ----------------------------------------------------------------


def main(number):
    """ Script entry point """

    rospy.init_node('controller%s' % (number))
    node = ControllerNode(number)
    rospy.spin()
    node.bag.close()

if __name__ == '__main__':
    number = int(sys.argv[1])
    main(number)
